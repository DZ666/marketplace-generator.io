version: "3.9"
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"   # AMQP порт
      - "15672:15672" # Management UI порт
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth:
    build:
      context: .
      dockerfile: src/auth/Dockerfile
    container_name: auth
    hostname: auth
    ports:
      - "${AUTH_PORT:-4000}:3000"
    environment:
      - PORT=3000
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672
      - NPM_FLAGS=--legacy-peer-deps
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/marketplace?schema=public
      - REDIS_URL=redis://redis:6379
      - SESSION_SECRET=some-very-secret-key-for-sessions
      - USER_SERVICE_URL=http://user:3001
    volumes:
      - ./src/auth:/app
      - ./src/libs/config:/workspace/src/libs/config
      - ./src/scripts:/scripts
      - auth_node_modules:/app/node_modules
      - config_dist:/workspace/src/libs/config/dist
    networks:
      - app-network
    command: >
      sh -c "chmod +x /app/startup.sh && /app/startup.sh"
    env_file:
      - .env
      - .env.dev
      - .env.prod
      - .env.test
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user:
        condition: service_started

  user:
    build:
      context: .
      dockerfile: src/user/Dockerfile
    ports:
      - "${USER_PORT:-4001}:3001"
    environment:
      - PORT=3001
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672
      - NPM_FLAGS=--legacy-peer-deps
    volumes:
      - ./src/user:/app
      - ./src/libs/config:/workspace/src/libs/config
      - ./src/scripts:/scripts
      - user_node_modules:/app/node_modules
      - config_dist:/workspace/src/libs/config/dist
    networks:
      - app-network
    command: npm run dev
    env_file:
      - .env
      - .env.dev
      - .env.prod
      - .env.test
    depends_on:
      rabbitmq:
        condition: service_healthy

  product:
    build:
      context: ./src/product
      dockerfile: Dockerfile
    ports:
      - "${PRODUCT_PORT:-4002}:3002"
    environment:
      - PORT=3002
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672
      - NPM_FLAGS=--legacy-peer-deps
    volumes:
      - ./src/product:/app
      - ./src/scripts:/scripts
      - /app/node_modules
    networks:
      - app-network
    command: npm run dev
    env_file:
      - .env
      - .env.dev
      - .env.prod
      - .env.test
    depends_on:
      rabbitmq:
        condition: service_healthy

  order:
    build:
      context: ./src/order
      dockerfile: Dockerfile
    ports:
      - "${ORDER_PORT:-4003}:3003"
    environment:
      - PORT=3003
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672
      - NPM_FLAGS=--legacy-peer-deps
    volumes:
      - ./src/order:/app
      - ./src/scripts:/scripts
      - /app/node_modules
    networks:
      - app-network
    command: npm run dev
    env_file:
      - .env
      - .env.dev
      - .env.prod
      - .env.test
    depends_on:
      rabbitmq:
        condition: service_healthy

  env-test:
    build:
      context: .
      dockerfile: src/env-test/Dockerfile
    environment:
      - NODE_ENV=test
      - PORT=4321
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      rabbitmq:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-marketplace}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "8888:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - admin-frontend
      - auth
      - user
      - product
      - order
    networks:
      - app-network

  admin-frontend:
    build:
      context: ./src/admin-frontend
      dockerfile: Dockerfile
    container_name: admin-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - API_BASE_URL=http://nginx:80
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8888/api
    volumes:
      - ./src/admin-frontend:/app
      - admin_frontend_node_modules:/app/node_modules
    networks:
      - app-network
    command: >
      sh -c "npm install && npm run dev"

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  rabbitmq_data:
  postgres_data:
  user_node_modules:
  auth_node_modules:
  redis_data:
  admin_frontend_node_modules:
  config_dist: